File =
  Decl*

Decl =
  function: DeclFn
| structure: DeclStruct
| constant: DeclConst

DeclFn =
  'fn'
  'ident'
  Generics
  params: Params
  returns: Params
  StmtBlock

DeclStruct =
  'struct' 'ident' Generics '{' Field* '}'

DeclConst =
  'const' 'ident' TypeExpr '=' Expr ';'

Expr =
  unary: ExprUnary
| binary: ExprBinary
| literal: ExprLiteral
| paren: ExprParen
| call: ExprCall
| ident: ExprIdent

ExprUnary =
  '+' '-'
  Expr

ExprBinary =
  '+' '-' '*' '/' '%' '<<' '>>' '&' '|' '^' '==' '!=' '<' '>' '<=' '>='
  lhs: Expr
  rhs: Expr

ExprLiteral =
  'string'
  'number'

ExprParen =
  '(' Expr ')'

ExprCall =
  Expr Arguments

ExprIdent =
  'ident'

Stmt =
  expr: StmtExpr
| block: StmtBlock
| return: StmtReturn
| if: StmtIf
| loop: StmtLoop
| while: StmtWhile
| let: StmtLet

StmtExpr =
  Expr ';'

StmtBlock =
  '{' Stmt* '}'

StmtReturn =
  'return' Expr* ';'

StmtIf =
  'if' Expr then:StmtBlock 'else' else:StmtBlock

StmtLoop =
  'loop' body:StmtBlock

StmtWhile =
  'while' Expr body:StmtBlock

StmtLet =
  'let' 'ident' TypeExpr '=' Expr ';'

TypeExpr =
  unary: TypeExprUnary
| ident: TypeExprIdent

TypeExprUnary =
  '*' TypeExpr

TypeExprIdent =
  'ident'

Generics =
  '<' Generic* '>'

Generic =
  'ident' ','

Arguments =
  '(' Argument* ')'

Argument =
  Expr ','

Params =
  '(' Param* ')'

Param =
  'ident' TypeExpr ','

Field =
  'ident' TypeExpr ';'
